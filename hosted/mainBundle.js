(()=>{var r={727:r=>{const n=()=>{const r=[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])];return Object.seal(r),r},t=[{name:"right",x:2,y:0,middle:{x:1,y:0}},{name:"up",x:0,y:-2,middle:{x:0,y:-1}},{name:"left",x:-2,y:0,middle:{x:-1,y:0}},{name:"down",x:0,y:2,middle:{x:0,y:1}}],e=new RegExp("^[0-9a-f]{9}$"),i=e.test.bind(e),o=r=>{if(!r)return!1;const t=n();if(!Array.isArray(r))return!1;const e=r.length;if(7!==e)return!1;for(let n=0;n<e;n++){const e=r[n];if(!(e instanceof Uint8Array))return!1;const i=e.length;if(7!==i)return!1;for(let r=0;r<i;r++){const i=e[r];if(0!==i&&1!==i&&2!==i)return!1;if(2===t[n][r]!=(2===i))return!1}}return!0};class a{constructor(r){r?o(r)?this.grid=r:"string"==typeof r?(this.grid=(r=>{if(!i(r))return null;const t=parseInt(r,16).toString(2).padStart(33,"0"),e=n();let o=0;for(let r=0;r<7;r++){const n=e[r];for(let r=0;r<7;r++)2!==n[r]&&(n[r]=t[o],o++)}return e})(r),this.grid||(this.grid=n())):this.grid=n():this.grid=n()}copyGrid(){const r=[];for(let n=0;n<7;n++)r[n]=new Uint8Array(this.grid[n]);return Object.seal(r),r}isValidMove(r,n){if(!r.from||"number"!=typeof r.from.x||"number"!=typeof r.from.y||!r.to||"number"!=typeof r.to.x||"number"!=typeof r.from.y)return null;const e=r.from.x,i=r.from.y,o=r.to.x,a=r.to.y,s=o-e,y=a-i;let l=null;for(let r=0;r<4;r++){const n=t[r];n.x===s&&n.y===y&&(l=n)}if(!l)return null;const f=l.middle,u=e+f.x,A=i+f.y;if(e<0||e>=7)return null;if(i<0||i>=7)return null;if(o<0||o>=7)return null;if(a<0||a>=7)return null;const w=n?0:1,d=n?0:1,U=n?1:0;return this.grid[i][e]!==w||this.grid[A][u]!==d||this.grid[a][o]!==U?null:{matchingDelta:l,moveMid:{x:u,y:A}}}allValidMoves(){const r=[];for(let n=0;n<7;n++)for(let e=0;e<7;e++)if(1===this.grid[n][e])for(let i=0;i<4;i++){const o=t[i],a={from:{x:e,y:n},to:{x:e+o.x,y:n+o.y}};this.isValidMove(a)&&r.push(a)}return r}makeMove(r,n){const t=this.isValidMove(r,n);if(!t)return;const{moveMid:e}=t,i=r.from,o=r.to,a=n?1:0,s=n?1:0,y=n?0:1;this.grid[i.y][i.x]=a,this.grid[e.y][e.x]=s,this.grid[o.y][o.x]=y}countBalls(){let r=0;for(let n=0;n<7;n++)for(let t=0;t<7;t++)1===this.grid[n][t]&&r++;return r}solve(){const r=new a(this.copyGrid());let n=r.countBalls();const t=[],e=[],i=()=>{if(1===n){const r=Array.from(t);e.push(r)}else{const e=r.allValidMoves();for(let o=0;o<e.length;o++){const a=e[o];r.makeMove(a),n--,t.push(a),i(),r.makeMove(a,!0),n++,t.pop()}}};return i(),e}gridToString(){return this.grid.map((r=>Array.from(r).map((r=>[".","O"," "][r])).join(" "))).join("\n")}code(){return(r=>{if(!o(r))return null;let n="";for(let t=0;t<7;t++){const e=r[t];for(let r=0;r<7;r++){const t=e[r];2!==t&&(n+=t)}}return parseInt(n,2).toString(16).padStart(9,"0")})(this.grid)}}r.exports=a}},n={};function t(e){var i=n[e];if(void 0!==i)return i.exports;var o=n[e]={exports:{}};return r[e](o,o.exports,t),o.exports}(()=>{const r=new(t(727))([(new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])),[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,0,1,0,1,0]),new Uint8Array([1,1,0,1,0,1,1]),new Uint8Array([2,2,1,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2])],(new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,0,1,0,1,0]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([2,2,1,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2])),(new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,1,0,1,0,0]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2])),(new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([1,1,1,0,1,1,1]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2]))][1]);console.log(r.gridToString()),console.log(r.solve())})()})();