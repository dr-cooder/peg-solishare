(()=>{var e={618:(e,r,t)=>{const{emptyBoard:n,width:i,height:a,validMoveDeltas:o,validMoveDeltaCount:l,symmetryKVPs:y,isHexCode:s,isBinCode:c,isGrid:d,copyGrid:w,codeToGrid:u,gridToCode:A}=t(856);class U{constructor(e){e?d(e)?this.grid=e:s(e)?this.grid=u(e):c(e)?this.grid=u(e,!0):this.grid=n():this.grid=n()}isValidMove(e,r){if(!e.from||"number"!=typeof e.from.x||"number"!=typeof e.from.y||!e.to||"number"!=typeof e.to.x||"number"!=typeof e.from.y)return null;const t=e.from.x,n=e.from.y,y=e.to.x,s=e.to.y,c=y-t,d=s-n;let w=null;for(let e=0;e<l;e++){const r=o[e];r.x===c&&r.y===d&&(w=r)}if(!w)return null;const u=w.middle,A=t+u.x,U=n+u.y;if(t<0||t>=i)return null;if(n<0||n>=a)return null;if(y<0||y>=i)return null;if(s<0||s>=a)return null;const m=r?0:1,f=r?0:1,g=r?1:0;return this.grid[n][t]!==m||this.grid[U][A]!==f||this.grid[s][y]!==g?null:{matchingDelta:w,moveMid:{x:A,y:U}}}allValidMoves(e){const r=[];for(let t=0;t<a;t++)for(let n=0;n<i;n++)if(1===this.grid[t][n])for(let i=0;i<l;i++){const a=o[i],l=e?{from:{x:n-a.x,y:t-a.y},to:{x:n,y:t}}:{from:{x:n,y:t},to:{x:n+a.x,y:t+a.y}};this.isValidMove(l,e)&&r.push(l)}return r}makeMove(e,r){const t=this.isValidMove(e,r);if(!t)return;const{moveMid:n}=t,i=e.from,a=e.to,o=r?1:0,l=r?1:0,y=r?0:1;this.grid[i.y][i.x]=o,this.grid[n.y][n.x]=l,this.grid[a.y][a.x]=y}countBalls(){let e=0;for(let r=0;r<a;r++)for(let t=0;t<i;t++)1===this.grid[r][t]&&e++;return e}getSymmetries(){const e=[];for(let r=0;r<y.length;r++){const[t,n]=y[r];let o=!0;for(let e=0;e<a;e++){for(let r=0;r<i;r++){const{x:t,y:i}=n({x:r,y:e});if(this.grid[e][r]!==this.grid[i][t]){o=!1;break}}if(!o)break}o&&e.push(t)}return e}generation(e=0,r=!1){const t=new U(w(this.grid)),n=new Set,i=e<0,a=e=>{if(0===e)n.add(t.code(r));else{const r=t.allValidMoves(i);for(let n=0;n<r.length;n++){const o=r[n];t.makeMove(o,i),a(e+(i?1:-1)),t.makeMove(o,!i)}}};return a(e),n}solve(){const e=new U(w(this.grid));let r=e.countBalls();const t=[],n=()=>{if(1===r)return t;const i=e.allValidMoves();for(let a=0;a<i.length;a++){const o=i[a];e.makeMove(o),r--,t.push(o);const l=n();if(l)return l;e.makeMove(o,!0),r++,t.pop()}return null};return n()}gridToString(){return this.grid.map((e=>Array.from(e).map((e=>[".","O"," "][e])).join(" "))).join("\n")}code(e){return A(this.grid,e)}}e.exports=U},273:e=>{e.exports=e=>React.createElement(React.Fragment,null,"(","Game board UI will go here",")")},856:e=>{const r=()=>{const e=[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])];return Object.seal(e),e},t={flipHoriz:e=>({x:6-e.x,y:e.y}),flipVert:e=>({x:e.x,y:6-e.y}),flipDiagPos:e=>({x:e.y,y:e.x}),flipDiagNeg:e=>({x:6-e.y,y:6-e.x}),rotate180:e=>({x:6-e.x,y:6-e.y}),rotate90counterClock:e=>({x:e.y,y:6-e.x}),rotate90clock:e=>({x:6-e.y,y:e.x})},n=Object.entries(t),i=new RegExp("^[0-9a-f]{9}$"),a=i.test.bind(i),o=new RegExp("^[01]{33}$"),l=o.test.bind(o);e.exports={emptyBoard:r,width:7,height:7,spaces:33,validMoveDeltas:[{name:"right",x:2,y:0,middle:{x:1,y:0}},{name:"up",x:0,y:-2,middle:{x:0,y:-1}},{name:"left",x:-2,y:0,middle:{x:-1,y:0}},{name:"down",x:0,y:2,middle:{x:0,y:1}}],validMoveDeltaCount:4,symmetries:t,symmetryKVPs:n,isHexCode:a,isBinCode:l,isGrid:e=>{if(!e)return!1;const t=r();if(!Array.isArray(e))return!1;const n=e.length;if(7!==n)return!1;for(let r=0;r<n;r++){const n=e[r];if(!(n instanceof Uint8Array))return!1;const i=n.length;if(7!==i)return!1;for(let e=0;e<i;e++){const i=n[e];if(0!==i&&1!==i&&2!==i)return!1;if(2===t[r][e]!=(2===i))return!1}}return!0},copyGrid:e=>{const r=[];for(let t=0;t<7;t++)r[t]=new Uint8Array(e[t]);return Object.seal(r),r},codeToGrid:(e,t)=>{const n=t?e:parseInt(e,16).toString(2).padStart(33,"0"),i=r();let a=0;for(let e=0;e<7;e++){const r=i[e];for(let e=0;e<7;e++)2!==r[e]&&(r[e]=n[a],a++)}return i},gridToCode:(e,r)=>{let t="";for(let r=0;r<7;r++){const n=e[r];for(let e=0;e<7;e++){const r=n[e];2!==r&&(t+=r)}}return r?t:parseInt(t,2).toString(16).padStart(9,"0")}}}},r={};function t(n){var i=r[n];if(void 0!==i)return i.exports;var a=r[n]={exports:{}};return e[n](a,a.exports,t),a.exports}(()=>{const e=t(618),r=t(273),n={disappearingAct1:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],disappearingAct2:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([0,1,1,1,1,1,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],disappearingAct3:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,1,1,1,1,0]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],spaceInvader:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,0,1,0,1,0]),new Uint8Array([1,1,0,1,0,1,1]),new Uint8Array([2,2,1,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2])],puroMask:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,0,1,0,1,0]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([2,2,1,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2])],disappearingAct4:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,1,0,1,0,0]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2])],generated:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,0,0,0]),new Uint8Array([1,1,1,1,0,0,0]),new Uint8Array([1,1,0,0,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],generated2:[new Uint8Array([2,2,0,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,1,1,0,1,1,0]),new Uint8Array([0,0,1,1,1,1,0]),new Uint8Array([1,1,1,0,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],baseGame:[new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([1,1,1,0,1,1,1]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2])]},i=t=>{const[i,a]=React.useState(),[o,l]=React.useState(),[y,s]=React.useState(!1),c=()=>{s(!1),a("Something went wrong...")};return React.createElement(React.Fragment,null,React.createElement("div",null,React.createElement(r,null)),React.createElement("div",null,"The selected puzzle is: ",t.puzzleName),React.createElement("button",{id:"solveButton",type:"button",className:"btn btn-primary",disabled:y,onClick:()=>{(async e=>{if(y)return null;s(!0),a("Calculating solution...");const{solution:r}=await(await fetch(`/solve?code=${e}`).catch(c)).json().catch(c);s(!1),a("Solution found!"),l(r.map(((e,r)=>React.createElement("li",{key:r},"(",e.from.x+1,", ",e.from.y+1,")"," ",React.createElement("i",{className:"fa fa-solid fa-arrow-right"})," ","(",e.to.x+1,", ",e.to.y+1,")"))))})(new e(n[t.puzzleName]).code())}},"Solve!"),React.createElement("h3",null,i),React.createElement("ol",{id:"steps"},o))};window.onload=()=>{ReactDOM.createRoot(document.getElementById("app")).render(React.createElement(i,{puzzleName:"generated2"}))}})()})();