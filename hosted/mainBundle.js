(()=>{var e={303:(e,t,r)=>{const{emptyBoard:n,width:a,height:i,validMoveDeltas:o,validMoveDeltaCount:l,symmetryKVPs:s,isHexCode:y,isBinCode:u,isPuzzle:c,copyPuzzle:w,codeToPuzzle:f,puzzleToCode:p}=r(175);class A{constructor(e){e?c(e)?this.puzzle=e:y(e)?this.puzzle=f(e):u(e)?this.puzzle=f(e,!0):this.puzzle=n():this.puzzle=n()}isValidMove(e,t){if(!e.from||"number"!=typeof e.from.x||"number"!=typeof e.from.y||!e.to||"number"!=typeof e.to.x||"number"!=typeof e.from.y)return null;const r=e.from.x,n=e.from.y,s=e.to.x,y=e.to.y,u=s-r,c=y-n;let w=null;for(let e=0;e<l;e++){const t=o[e];t.x===u&&t.y===c&&(w=t)}if(!w)return null;const f=w.middle,p=r+f.x,A=n+f.y;if(r<0||r>=a)return null;if(n<0||n>=i)return null;if(s<0||s>=a)return null;if(y<0||y>=i)return null;const m=t?0:1,d=t?0:1,U=t?1:0;return this.puzzle[n][r]!==m||this.puzzle[A][p]!==d||this.puzzle[y][s]!==U?null:{matchingDelta:w,moveMid:{x:p,y:A}}}allValidMoves(e){const t=[];for(let r=0;r<i;r++)for(let n=0;n<a;n++)if(1===this.puzzle[r][n])for(let a=0;a<l;a++){const i=o[a],l=e?{from:{x:n-i.x,y:r-i.y},to:{x:n,y:r}}:{from:{x:n,y:r},to:{x:n+i.x,y:r+i.y}};this.isValidMove(l,e)&&t.push(l)}return t}makeMove(e,t){const r=this.isValidMove(e,t);if(!r)return;const{moveMid:n}=r,a=e.from,i=e.to,o=t?1:0,l=t?1:0,s=t?0:1;this.puzzle[a.y][a.x]=o,this.puzzle[n.y][n.x]=l,this.puzzle[i.y][i.x]=s}countBalls(){let e=0;for(let t=0;t<i;t++)for(let r=0;r<a;r++)1===this.puzzle[t][r]&&e++;return e}getSymmetries(){const e=[];for(let t=0;t<s.length;t++){const[r,n]=s[t];let o=!0;for(let e=0;e<i;e++){for(let t=0;t<a;t++){const{x:r,y:a}=n({x:t,y:e});if(this.puzzle[e][t]!==this.puzzle[a][r]){o=!1;break}}if(!o)break}o&&e.push(r)}return e}generation(e=0,t=!1){const r=new A(w(this.puzzle)),n=new Set,a=e<0,i=e=>{if(0===e)n.add(r.code(t));else{const t=r.allValidMoves(a);for(let n=0;n<t.length;n++){const o=t[n];r.makeMove(o,a),i(e+(a?1:-1)),r.makeMove(o,!a)}}};return i(e),n}solve(){const e=new A(w(this.puzzle));let t=e.countBalls();const r=[],n=()=>{if(1===t)return r;const a=e.allValidMoves();for(let i=0;i<a.length;i++){const o=a[i];e.makeMove(o),t--,r.push(o);const l=n();if(l)return l;e.makeMove(o,!0),t++,r.pop()}return null};return n()}puzzleToString(){return this.puzzle.map((e=>Array.from(e).map((e=>[".","O"," "][e])).join(" "))).join("\n")}code(e){return p(this.puzzle,e)}}e.exports=A},273:e=>{const{useRef:t,useEffect:r,useState:n}=React;e.exports=e=>{const a=t(null),i=t(null),[o,l]=n(!1);return r((()=>{const e=a.current,t=i.current,r=e.getContext("2d");let n=300,o=300;window.addEventListener("mousemove",(r=>{if(!r)return;let a,i;"touchmove"===r.type?(a=r.touches[0].pageX,i=r.touches[0].pageY):"mousemove"===r.type&&(a=r.pageX,i=r.pageY),n=(a-t.offsetLeft)*(e.width/t.offsetWidth),o=(i-t.offsetTop)*(e.height/t.offsetHeight)}));const l=()=>{requestAnimationFrame(l),r.clearRect(0,0,600,600),r.beginPath(),r.arc(n,o,20,0,2*Math.PI),r.closePath(),r.fill(),r.beginPath()};l()}),[]),React.createElement("div",{ref:i,className:"gameBoardCanvasOuter"},React.createElement("canvas",{ref:a,width:"600",height:"600"}))}},175:e=>{const t=()=>{const e=[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])];return Object.seal(e),e},r={flipHoriz:e=>({x:6-e.x,y:e.y}),flipVert:e=>({x:e.x,y:6-e.y}),flipDiagPos:e=>({x:e.y,y:e.x}),flipDiagNeg:e=>({x:6-e.y,y:6-e.x}),rotate180:e=>({x:6-e.x,y:6-e.y}),rotate90counterClock:e=>({x:e.y,y:6-e.x}),rotate90clock:e=>({x:6-e.y,y:e.x})},n=Object.entries(r),a=new RegExp("^[0-9a-f]{9}$"),i=a.test.bind(a),o=new RegExp("^[01]{33}$"),l=o.test.bind(o);e.exports={emptyBoard:t,width:7,height:7,spaces:33,validMoveDeltas:[{name:"right",x:2,y:0,middle:{x:1,y:0}},{name:"up",x:0,y:-2,middle:{x:0,y:-1}},{name:"left",x:-2,y:0,middle:{x:-1,y:0}},{name:"down",x:0,y:2,middle:{x:0,y:1}}],validMoveDeltaCount:4,symmetries:r,symmetryKVPs:n,isHexCode:i,isBinCode:l,isPuzzle:e=>{if(!e)return!1;const r=t();if(!Array.isArray(e))return!1;const n=e.length;if(7!==n)return!1;for(let t=0;t<n;t++){const n=e[t];if(!(n instanceof Uint8Array))return!1;const a=n.length;if(7!==a)return!1;for(let e=0;e<a;e++){const a=n[e];if(0!==a&&1!==a&&2!==a)return!1;if(2===r[t][e]!=(2===a))return!1}}return!0},copyPuzzle:e=>{const t=[];for(let r=0;r<7;r++)t[r]=new Uint8Array(e[r]);return Object.seal(t),t},codeToPuzzle:(e,r)=>{const n=r?e:parseInt(e,16).toString(2).padStart(33,"0"),a=t();let i=0;for(let e=0;e<7;e++){const t=a[e];for(let e=0;e<7;e++)2!==t[e]&&(t[e]=n[i],i++)}return a},puzzleToCode:(e,t)=>{let r="";for(let t=0;t<7;t++){const n=e[t];for(let e=0;e<7;e++){const t=n[e];2!==t&&(r+=t)}}return t?r:parseInt(r,2).toString(16).padStart(9,"0")}}}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,r),i.exports}(()=>{const e=r(303),t=r(273),n={disappearingAct1:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],disappearingAct2:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([0,1,1,1,1,1,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],disappearingAct3:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,1,1,1,1,0]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],spaceInvader:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,0,1,0,1,0]),new Uint8Array([1,1,0,1,0,1,1]),new Uint8Array([2,2,1,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2])],puroMask:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,0,1,0,1,0]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([2,2,1,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2])],disappearingAct4:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,1,0,1,0,0]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2])],generated:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,0,0,0]),new Uint8Array([1,1,1,1,0,0,0]),new Uint8Array([1,1,0,0,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],generated2:[new Uint8Array([2,2,0,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,1,1,0,1,1,0]),new Uint8Array([0,0,1,1,1,1,0]),new Uint8Array([1,1,1,0,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],baseGame:[new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([1,1,1,0,1,1,1]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2])]},a=r=>{const[a,i]=React.useState(),[o,l]=React.useState(),[s,y]=React.useState(!1),u=()=>{y(!1),i("Something went wrong...")};return React.createElement(React.Fragment,null,React.createElement("div",null,React.createElement(t,null)),React.createElement("div",null,"The selected puzzle is: ",r.puzzleName),React.createElement("button",{id:"solveButton",type:"button",className:"btn btn-primary",disabled:s,onClick:()=>{(async e=>{if(s)return null;y(!0),i("Calculating solution...");const{solution:t}=await(await fetch(`/solve?code=${e}`).catch(u)).json().catch(u);y(!1),i("Solution found!"),l(t.map(((e,t)=>React.createElement("li",{key:t},"(",e.from.x+1,", ",e.from.y+1,")"," ",React.createElement("i",{className:"fa fa-solid fa-arrow-right"})," ","(",e.to.x+1,", ",e.to.y+1,")"))))})(new e(n[r.puzzleName]).code())}},"Solve!"),React.createElement("h3",null,a),React.createElement("ol",{id:"steps"},o))};window.onload=()=>{ReactDOM.createRoot(document.getElementById("app")).render(React.createElement(a,{puzzleName:"generated2"}))}})()})();