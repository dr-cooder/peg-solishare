(()=>{var r={727:r=>{const t=()=>{const r=[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])];return Object.seal(r),r},n=[{name:"right",x:2,y:0,middle:{x:1,y:0}},{name:"up",x:0,y:-2,middle:{x:0,y:-1}},{name:"left",x:-2,y:0,middle:{x:-1,y:0}},{name:"down",x:0,y:2,middle:{x:0,y:1}}],e={flipHoriz:r=>({x:6-r.x,y:r.y}),flipVert:r=>({x:r.x,y:6-r.y}),flipDiagPos:r=>({x:r.y,y:r.x}),flipDiagNeg:r=>({x:6-r.y,y:6-r.x}),rotate180:r=>({x:6-r.x,y:6-r.y}),rotate90counterClock:r=>({x:r.y,y:6-r.x}),rotate90clock:r=>({x:6-r.y,y:r.x})},i=Object.entries(e),o=new RegExp("^[0-9a-f]{9}$"),a=o.test.bind(o);class s{constructor(r){r?(r=>{if(!r)return!1;const n=t();if(!Array.isArray(r))return!1;const e=r.length;if(7!==e)return!1;for(let t=0;t<e;t++){const e=r[t];if(!(e instanceof Uint8Array))return!1;const i=e.length;if(7!==i)return!1;for(let r=0;r<i;r++){const i=e[r];if(0!==i&&1!==i&&2!==i)return!1;if(2===n[t][r]!=(2===i))return!1}}return!0})(r)?this.grid=r:a(r)?this.grid=(r=>{const n=parseInt(r,16).toString(2).padStart(33,"0"),e=t();let i=0;for(let r=0;r<7;r++){const t=e[r];for(let r=0;r<7;r++)2!==t[r]&&(t[r]=n[i],i++)}return e})(r):this.grid=t():this.grid=t()}copyGrid(){const r=[];for(let t=0;t<7;t++)r[t]=new Uint8Array(this.grid[t]);return Object.seal(r),r}isValidMove(r,t){if(!r.from||"number"!=typeof r.from.x||"number"!=typeof r.from.y||!r.to||"number"!=typeof r.to.x||"number"!=typeof r.from.y)return null;const e=r.from.x,i=r.from.y,o=r.to.x,a=r.to.y,s=o-e,y=a-i;let l=null;for(let r=0;r<4;r++){const t=n[r];t.x===s&&t.y===y&&(l=t)}if(!l)return null;const c=l.middle,f=e+c.x,w=i+c.y;if(e<0||e>=7)return null;if(i<0||i>=7)return null;if(o<0||o>=7)return null;if(a<0||a>=7)return null;const u=t?0:1,A=t?0:1,U=t?1:0;return this.grid[i][e]!==u||this.grid[w][f]!==A||this.grid[a][o]!==U?null:{matchingDelta:l,moveMid:{x:f,y:w}}}allValidMoves(){const r=[];for(let t=0;t<7;t++)for(let e=0;e<7;e++)if(1===this.grid[t][e])for(let i=0;i<4;i++){const o=n[i],a={from:{x:e,y:t},to:{x:e+o.x,y:t+o.y}};this.isValidMove(a)&&r.push(a)}return r}makeMove(r,t){const n=this.isValidMove(r,t);if(!n)return;const{moveMid:e}=n,i=r.from,o=r.to,a=t?1:0,s=t?1:0,y=t?0:1;this.grid[i.y][i.x]=a,this.grid[e.y][e.x]=s,this.grid[o.y][o.x]=y}countBalls(){let r=0;for(let t=0;t<7;t++)for(let n=0;n<7;n++)1===this.grid[t][n]&&r++;return r}getSymmetries(){const r=[];for(let t=0;t<i.length;t++){const[n,e]=i[t];let o=!0;for(let r=0;r<7;r++){for(let t=0;t<7;t++){const{x:n,y:i}=e({x:t,y:r});if(this.grid[r][t]!==this.grid[i][n]){o=!1;break}}if(!o)break}o&&r.push(n)}return r}solve(){const r=new s(this.copyGrid());let t=r.countBalls();const n=[],e=[],i=()=>{if(4===t){const r=Array.from(n);e.push(r)}else{const e=r.allValidMoves();for(let o=0;o<e.length;o++){const a=e[o];r.makeMove(a),t--,n.push(a),i(),r.makeMove(a,!0),t++,n.pop()}}};return i(),e}solveOne(){const r=new s(this.copyGrid());let t=r.countBalls();const n=[],e=()=>{if(1===t)return n;const i=r.allValidMoves();for(let o=0;o<i.length;o++){const a=i[o];r.makeMove(a),t--,n.push(a);const s=e();if(s)return s;r.makeMove(a,!0),t++,n.pop()}return null};return e()}solveBetter(){const r=new s(this.copyGrid());let t=r.countBalls();const n=i=>{const o={moveFromParent:i,children:[]};i&&(r.makeMove(i),t--);const a=r.getSymmetries();o.symmetries=a;const s=r.allValidMoves(),y=s.length;for(let r=0;r<a.length;r++){const t=e[a[r]];for(let r=0;r<y;r++){const n=s[r];if(n){const e=t(n.from),i=t(n.to);for(let t=0;t<y;t++)if(r!==t){const r=s[t];if(r){const{from:n,to:o}=r;n.x===e.x&&n.y===e.y&&o.x===i.x&&o.y===i.y&&(s[t]=null)}}}}}for(let r=0;r<y;r++){const e=s[r];if(e){const r=n(e);0===r.children.length&&1!==t||o.children.push(r)}}return i&&(r.makeMove(i,!0),t++),o};return n()}gridToString(){return this.grid.map((r=>Array.from(r).map((r=>[".","O"," "][r])).join(" "))).join("\n")}code(){return(r=>{let t="";for(let n=0;n<7;n++){const e=r[n];for(let r=0;r<7;r++){const n=e[r];2!==n&&(t+=n)}}return parseInt(t,2).toString(16).padStart(9,"0")})(this.grid)}}r.exports=s}},t={};function n(e){var i=t[e];if(void 0!==i)return i.exports;var o=t[e]={exports:{}};return r[e](o,o.exports,n),o.exports}(()=>{const r=new(n(727))((new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([0,1,1,1,1,1,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,1,1,1,1,0]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,0,1,0,1,0]),new Uint8Array([1,1,0,1,0,1,1]),new Uint8Array([2,2,1,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,0,1,0,1,0]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([2,2,1,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,1,0,1,0,0]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2]),[new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([1,1,1,0,1,1,1]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2])]));console.log(r.gridToString());const t=r.solveOne();for(let n=0;n<t.length;n++){const e=t[n];r.makeMove(e),console.log(r.gridToString())}})()})();