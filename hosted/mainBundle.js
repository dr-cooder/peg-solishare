(()=>{var r={618:(r,t,n)=>{const{emptyBoard:e,width:i,height:o,validMoveDeltas:s,validMoveDeltaCount:a,symmetryKVPs:y,isCode:l,isGrid:c,codeToGrid:d,gridToCode:f}=n(856);class w{constructor(r){r?c(r)?this.grid=r:l(r)?this.grid=d(r):this.grid=e():this.grid=e()}copyGrid(){const r=[];for(let t=0;t<o;t++)r[t]=new Uint8Array(this.grid[t]);return Object.seal(r),r}isValidMove(r,t){if(!r.from||"number"!=typeof r.from.x||"number"!=typeof r.from.y||!r.to||"number"!=typeof r.to.x||"number"!=typeof r.from.y)return null;const n=r.from.x,e=r.from.y,y=r.to.x,l=r.to.y,c=y-n,d=l-e;let f=null;for(let r=0;r<a;r++){const t=s[r];t.x===c&&t.y===d&&(f=t)}if(!f)return null;const w=f.middle,u=n+w.x,A=e+w.y;if(n<0||n>=i)return null;if(e<0||e>=o)return null;if(y<0||y>=i)return null;if(l<0||l>=o)return null;const U=t?0:1,m=t?0:1,h=t?1:0;return this.grid[e][n]!==U||this.grid[A][u]!==m||this.grid[l][y]!==h?null:{matchingDelta:f,moveMid:{x:u,y:A}}}allValidMoves(){const r=[];for(let t=0;t<o;t++)for(let n=0;n<i;n++)if(1===this.grid[t][n])for(let e=0;e<a;e++){const i=s[e],o={from:{x:n,y:t},to:{x:n+i.x,y:t+i.y}};this.isValidMove(o)&&r.push(o)}return r}makeMove(r,t){const n=this.isValidMove(r,t);if(!n)return;const{moveMid:e}=n,i=r.from,o=r.to,s=t?1:0,a=t?1:0,y=t?0:1;this.grid[i.y][i.x]=s,this.grid[e.y][e.x]=a,this.grid[o.y][o.x]=y}countBalls(){let r=0;for(let t=0;t<o;t++)for(let n=0;n<i;n++)1===this.grid[t][n]&&r++;return r}getSymmetries(){const r=[];for(let t=0;t<y.length;t++){const[n,e]=y[t];let s=!0;for(let r=0;r<o;r++){for(let t=0;t<i;t++){const{x:n,y:i}=e({x:t,y:r});if(this.grid[r][t]!==this.grid[i][n]){s=!1;break}}if(!s)break}s&&r.push(n)}return r}solve(){const r=new w(this.copyGrid());let t=r.countBalls();const n=[],e=[],i=()=>{if(4===t){const r=Array.from(n);e.push(r)}else{const e=r.allValidMoves();for(let o=0;o<e.length;o++){const s=e[o];r.makeMove(s),t--,n.push(s),i(),r.makeMove(s,!0),t++,n.pop()}}};return i(),e}solveOne(){const r=new w(this.copyGrid());let t=r.countBalls();const n=[],e=()=>{if(1===t)return n;const i=r.allValidMoves();for(let o=0;o<i.length;o++){const s=i[o];r.makeMove(s),t--,n.push(s);const a=e();if(a)return a;r.makeMove(s,!0),t++,n.pop()}return null};return e()}solveBetter(){const r=new w(this.copyGrid());let t=r.countBalls();const n=e=>{const i={moveFromParent:e,children:[]};e&&(r.makeMove(e),t--);const o=r.getSymmetries();i.symmetries=o;const s=r.allValidMoves(),a=s.length;for(let r=0;r<o.length;r++){const t=symmetries[o[r]];for(let r=0;r<a;r++){const n=s[r];if(n){const e=t(n.from),i=t(n.to);for(let t=0;t<a;t++)if(r!==t){const r=s[t];if(r){const{from:n,to:o}=r;n.x===e.x&&n.y===e.y&&o.x===i.x&&o.y===i.y&&(s[t]=null)}}}}}for(let r=0;r<a;r++){const e=s[r];if(e){const r=n(e);0===r.children.length&&1!==t||i.children.push(r)}}return e&&(r.makeMove(e,!0),t++),i};return n()}gridToString(){return this.grid.map((r=>Array.from(r).map((r=>[".","O"," "][r])).join(" "))).join("\n")}code(){return f(this.grid)}}r.exports=w},856:r=>{const t=()=>{const r=[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])];return Object.seal(r),r},n={flipHoriz:r=>({x:6-r.x,y:r.y}),flipVert:r=>({x:r.x,y:6-r.y}),flipDiagPos:r=>({x:r.y,y:r.x}),flipDiagNeg:r=>({x:6-r.y,y:6-r.x}),rotate180:r=>({x:6-r.x,y:6-r.y}),rotate90counterClock:r=>({x:r.y,y:6-r.x}),rotate90clock:r=>({x:6-r.y,y:r.x})},e=Object.entries(n),i=new RegExp("^[0-9a-f]{9}$"),o=i.test.bind(i);r.exports={emptyBoard:t,width:7,height:7,spaces:33,validMoveDeltas:[{name:"right",x:2,y:0,middle:{x:1,y:0}},{name:"up",x:0,y:-2,middle:{x:0,y:-1}},{name:"left",x:-2,y:0,middle:{x:-1,y:0}},{name:"down",x:0,y:2,middle:{x:0,y:1}}],validMoveDeltaCount:4,symmetries:n,symmetryKVPs:e,isCode:o,isGrid:r=>{if(!r)return!1;const n=t();if(!Array.isArray(r))return!1;const e=r.length;if(7!==e)return!1;for(let t=0;t<e;t++){const e=r[t];if(!(e instanceof Uint8Array))return!1;const i=e.length;if(7!==i)return!1;for(let r=0;r<i;r++){const i=e[r];if(0!==i&&1!==i&&2!==i)return!1;if(2===n[t][r]!=(2===i))return!1}}return!0},codeToGrid:r=>{const n=parseInt(r,16).toString(2).padStart(33,"0"),e=t();let i=0;for(let r=0;r<7;r++){const t=e[r];for(let r=0;r<7;r++)2!==t[r]&&(t[r]=n[i],i++)}return e},gridToCode:r=>{let t="";for(let n=0;n<7;n++){const e=r[n];for(let r=0;r<7;r++){const n=e[r];2!==n&&(t+=n)}}return parseInt(t,2).toString(16).padStart(9,"0")}}}},t={};(async r=>{console.log(r.gridToString());const t=r.code(),{solution:n}=await(await fetch(`/solve?code=${t}`)).json();for(let t=0;t<n.length;t++){const e=n[t];r.makeMove(e),console.log(r.gridToString())}})(new(function n(e){var i=t[e];if(void 0!==i)return i.exports;var o=t[e]={exports:{}};return r[e](o,o.exports,n),o.exports}(618))([(new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])),(new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([0,1,1,1,1,1,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])),(new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,1,1,1,1,0]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])),(new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,0,1,0,1,0]),new Uint8Array([1,1,0,1,0,1,1]),new Uint8Array([2,2,1,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2])),[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,0,1,0,1,0]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([2,2,1,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2])],(new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,1,0,1,0,0]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2])),(new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([1,1,1,0,1,1,1]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2]))][4]))})();