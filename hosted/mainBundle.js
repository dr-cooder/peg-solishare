(()=>{var r={618:(r,t,e)=>{const{emptyBoard:n,width:i,height:a,validMoveDeltas:o,validMoveDeltaCount:y,symmetryKVPs:s,isHexCode:l,isGrid:c,copyGrid:d,codeToGrid:w,gridToCode:u}=e(856);class A{constructor(r){r?c(r)?this.grid=r:l(r)?this.grid=w(r):this.grid=n():this.grid=n()}isValidMove(r,t){if(!r.from||"number"!=typeof r.from.x||"number"!=typeof r.from.y||!r.to||"number"!=typeof r.to.x||"number"!=typeof r.from.y)return null;const e=r.from.x,n=r.from.y,s=r.to.x,l=r.to.y,c=s-e,d=l-n;let w=null;for(let r=0;r<y;r++){const t=o[r];t.x===c&&t.y===d&&(w=t)}if(!w)return null;const u=w.middle,A=e+u.x,f=n+u.y;if(e<0||e>=i)return null;if(n<0||n>=a)return null;if(s<0||s>=i)return null;if(l<0||l>=a)return null;const U=t?0:1,m=t?0:1,g=t?1:0;return this.grid[n][e]!==U||this.grid[f][A]!==m||this.grid[l][s]!==g?null:{matchingDelta:w,moveMid:{x:A,y:f}}}allValidMoves(r){const t=[];for(let e=0;e<a;e++)for(let n=0;n<i;n++)if(1===this.grid[e][n])for(let i=0;i<y;i++){const a=o[i],y=r?{from:{x:n-a.x,y:e-a.y},to:{x:n,y:e}}:{from:{x:n,y:e},to:{x:n+a.x,y:e+a.y}};this.isValidMove(y,r)&&t.push(y)}return t}makeMove(r,t){const e=this.isValidMove(r,t);if(!e)return;const{moveMid:n}=e,i=r.from,a=r.to,o=t?1:0,y=t?1:0,s=t?0:1;this.grid[i.y][i.x]=o,this.grid[n.y][n.x]=y,this.grid[a.y][a.x]=s}countBalls(){let r=0;for(let t=0;t<a;t++)for(let e=0;e<i;e++)1===this.grid[t][e]&&r++;return r}getSymmetries(){const r=[];for(let t=0;t<s.length;t++){const[e,n]=s[t];let o=!0;for(let r=0;r<a;r++){for(let t=0;t<i;t++){const{x:e,y:i}=n({x:t,y:r});if(this.grid[r][t]!==this.grid[i][e]){o=!1;break}}if(!o)break}o&&r.push(e)}return r}generation(r=0,t=!1){const e=new A(d(this.grid)),n=new Set,i=r<0,a=r=>{if(0===r)n.add(e.code(t));else{const t=e.allValidMoves(i);for(let n=0;n<t.length;n++){const o=t[n];e.makeMove(o,i),a(r+(i?1:-1)),e.makeMove(o,!i)}}};return a(r),n}solveOne(){const r=new A(d(this.grid));let t=r.countBalls();const e=[],n=()=>{if(1===t)return e;const i=r.allValidMoves();for(let a=0;a<i.length;a++){const o=i[a];r.makeMove(o),t--,e.push(o);const y=n();if(y)return y;r.makeMove(o,!0),t++,e.pop()}return null};return n()}gridToString(){return this.grid.map((r=>Array.from(r).map((r=>[".","O"," "][r])).join(" "))).join("\n")}code(r){return u(this.grid,r)}}r.exports=A},856:r=>{const t=()=>{const r=[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])];return Object.seal(r),r},e={flipHoriz:r=>({x:6-r.x,y:r.y}),flipVert:r=>({x:r.x,y:6-r.y}),flipDiagPos:r=>({x:r.y,y:r.x}),flipDiagNeg:r=>({x:6-r.y,y:6-r.x}),rotate180:r=>({x:6-r.x,y:6-r.y}),rotate90counterClock:r=>({x:r.y,y:6-r.x}),rotate90clock:r=>({x:6-r.y,y:r.x})},n=Object.entries(e),i=new RegExp("^[0-9a-f]{9}$"),a=i.test.bind(i);r.exports={emptyBoard:t,width:7,height:7,spaces:33,validMoveDeltas:[{name:"right",x:2,y:0,middle:{x:1,y:0}},{name:"up",x:0,y:-2,middle:{x:0,y:-1}},{name:"left",x:-2,y:0,middle:{x:-1,y:0}},{name:"down",x:0,y:2,middle:{x:0,y:1}}],validMoveDeltaCount:4,symmetries:e,symmetryKVPs:n,isHexCode:a,isGrid:r=>{if(!r)return!1;const e=t();if(!Array.isArray(r))return!1;const n=r.length;if(7!==n)return!1;for(let t=0;t<n;t++){const n=r[t];if(!(n instanceof Uint8Array))return!1;const i=n.length;if(7!==i)return!1;for(let r=0;r<i;r++){const i=n[r];if(0!==i&&1!==i&&2!==i)return!1;if(2===e[t][r]!=(2===i))return!1}}return!0},copyGrid:r=>{const t=[];for(let e=0;e<7;e++)t[e]=new Uint8Array(r[e]);return Object.seal(t),t},codeToGrid:r=>{const e=parseInt(r,16).toString(2).padStart(33,"0"),n=t();let i=0;for(let r=0;r<7;r++){const t=n[r];for(let r=0;r<7;r++)2!==t[r]&&(t[r]=e[i],i++)}return n},gridToCode:(r,t)=>{let e="";for(let t=0;t<7;t++){const n=r[t];for(let r=0;r<7;r++){const t=n[r];2!==t&&(e+=t)}}return t?e:parseInt(e,2).toString(16).padStart(9,"0")}}}},t={};function e(n){var i=t[n];if(void 0!==i)return i.exports;var a=t[n]={exports:{}};return r[n](a,a.exports,e),a.exports}(()=>{const r=e(618),t={disappearingAct1:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],disappearingAct2:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([0,1,1,1,1,1,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],disappearingAct3:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,1,1,1,1,0]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],spaceInvader:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,0,1,0,1,0]),new Uint8Array([1,1,0,1,0,1,1]),new Uint8Array([2,2,1,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2])],puroMask:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,0,1,0,1,0]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([2,2,1,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2])],disappearingAct4:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,1,0,1,0,0]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2])],generated:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,0,0,0]),new Uint8Array([1,1,1,1,0,0,0]),new Uint8Array([1,1,0,0,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],baseGame:[new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([1,1,1,0,1,1,1]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2])]},n=e=>{const[n,i]=React.useState(),[a,o]=React.useState(),[y,s]=React.useState(!1),l=()=>{s(!1),i("Something went wrong...")};return React.createElement(React.Fragment,null,React.createElement("button",{id:"solveButton",type:"button",className:"btn btn-primary",disabled:y,onClick:()=>{(async r=>{if(y)return null;s(!0),i("Calculating solution...");const{solution:t}=await(await fetch(`/solve?code=${r}`).catch(l)).json().catch(l);s(!1),i("Solution found!"),o(t.map(((r,t)=>React.createElement("li",{key:t},"(",r.from.x,", ",r.from.y,")"," ",React.createElement("i",{className:"fa fa-solid fa-arrow-right"})," ","(",r.to.x,", ",r.to.y,")"))))})(new r(t[e.puzzleName]).code())}},"Solve!"),React.createElement("h3",null,n),React.createElement("ol",{id:"steps"},a))};window.onload=()=>{ReactDOM.createRoot(document.getElementById("solveUIContainer")).render(React.createElement(n,{puzzleName:"generated"}))}})()})();