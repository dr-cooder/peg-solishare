(()=>{var r={618:(r,e,t)=>{const{emptyBoard:n,width:i,height:a,validMoveDeltas:o,validMoveDeltaCount:s,symmetryKVPs:y,isHexCode:l,isBinCode:c,isGrid:d,copyGrid:w,codeToGrid:u,gridToCode:A}=t(856);class f{constructor(r){r?d(r)?this.grid=r:l(r)?this.grid=u(r):c(r)?this.grid=u(r,!0):this.grid=n():this.grid=n()}isValidMove(r,e){if(!r.from||"number"!=typeof r.from.x||"number"!=typeof r.from.y||!r.to||"number"!=typeof r.to.x||"number"!=typeof r.from.y)return null;const t=r.from.x,n=r.from.y,y=r.to.x,l=r.to.y,c=y-t,d=l-n;let w=null;for(let r=0;r<s;r++){const e=o[r];e.x===c&&e.y===d&&(w=e)}if(!w)return null;const u=w.middle,A=t+u.x,f=n+u.y;if(t<0||t>=i)return null;if(n<0||n>=a)return null;if(y<0||y>=i)return null;if(l<0||l>=a)return null;const U=e?0:1,m=e?0:1,g=e?1:0;return this.grid[n][t]!==U||this.grid[f][A]!==m||this.grid[l][y]!==g?null:{matchingDelta:w,moveMid:{x:A,y:f}}}allValidMoves(r){const e=[];for(let t=0;t<a;t++)for(let n=0;n<i;n++)if(1===this.grid[t][n])for(let i=0;i<s;i++){const a=o[i],s=r?{from:{x:n-a.x,y:t-a.y},to:{x:n,y:t}}:{from:{x:n,y:t},to:{x:n+a.x,y:t+a.y}};this.isValidMove(s,r)&&e.push(s)}return e}makeMove(r,e){const t=this.isValidMove(r,e);if(!t)return;const{moveMid:n}=t,i=r.from,a=r.to,o=e?1:0,s=e?1:0,y=e?0:1;this.grid[i.y][i.x]=o,this.grid[n.y][n.x]=s,this.grid[a.y][a.x]=y}countBalls(){let r=0;for(let e=0;e<a;e++)for(let t=0;t<i;t++)1===this.grid[e][t]&&r++;return r}getSymmetries(){const r=[];for(let e=0;e<y.length;e++){const[t,n]=y[e];let o=!0;for(let r=0;r<a;r++){for(let e=0;e<i;e++){const{x:t,y:i}=n({x:e,y:r});if(this.grid[r][e]!==this.grid[i][t]){o=!1;break}}if(!o)break}o&&r.push(t)}return r}generation(r=0,e=!1){const t=new f(w(this.grid)),n=new Set,i=r<0,a=r=>{if(0===r)n.add(t.code(e));else{const e=t.allValidMoves(i);for(let n=0;n<e.length;n++){const o=e[n];t.makeMove(o,i),a(r+(i?1:-1)),t.makeMove(o,!i)}}};return a(r),n}solveOne(){const r=new f(w(this.grid));let e=r.countBalls();const t=[],n=()=>{if(1===e)return t;const i=r.allValidMoves();for(let a=0;a<i.length;a++){const o=i[a];r.makeMove(o),e--,t.push(o);const s=n();if(s)return s;r.makeMove(o,!0),e++,t.pop()}return null};return n()}gridToString(){return this.grid.map((r=>Array.from(r).map((r=>[".","O"," "][r])).join(" "))).join("\n")}code(r){return A(this.grid,r)}}r.exports=f},856:r=>{const e=()=>{const r=[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])];return Object.seal(r),r},t={flipHoriz:r=>({x:6-r.x,y:r.y}),flipVert:r=>({x:r.x,y:6-r.y}),flipDiagPos:r=>({x:r.y,y:r.x}),flipDiagNeg:r=>({x:6-r.y,y:6-r.x}),rotate180:r=>({x:6-r.x,y:6-r.y}),rotate90counterClock:r=>({x:r.y,y:6-r.x}),rotate90clock:r=>({x:6-r.y,y:r.x})},n=Object.entries(t),i=new RegExp("^[0-9a-f]{9}$"),a=i.test.bind(i),o=new RegExp("^[01]{33}$"),s=o.test.bind(o);r.exports={emptyBoard:e,width:7,height:7,spaces:33,validMoveDeltas:[{name:"right",x:2,y:0,middle:{x:1,y:0}},{name:"up",x:0,y:-2,middle:{x:0,y:-1}},{name:"left",x:-2,y:0,middle:{x:-1,y:0}},{name:"down",x:0,y:2,middle:{x:0,y:1}}],validMoveDeltaCount:4,symmetries:t,symmetryKVPs:n,isHexCode:a,isBinCode:s,isGrid:r=>{if(!r)return!1;const t=e();if(!Array.isArray(r))return!1;const n=r.length;if(7!==n)return!1;for(let e=0;e<n;e++){const n=r[e];if(!(n instanceof Uint8Array))return!1;const i=n.length;if(7!==i)return!1;for(let r=0;r<i;r++){const i=n[r];if(0!==i&&1!==i&&2!==i)return!1;if(2===t[e][r]!=(2===i))return!1}}return!0},copyGrid:r=>{const e=[];for(let t=0;t<7;t++)e[t]=new Uint8Array(r[t]);return Object.seal(e),e},codeToGrid:(r,t)=>{const n=t?r:parseInt(r,16).toString(2).padStart(33,"0"),i=e();let a=0;for(let r=0;r<7;r++){const e=i[r];for(let r=0;r<7;r++)2!==e[r]&&(e[r]=n[a],a++)}return i},gridToCode:(r,e)=>{let t="";for(let e=0;e<7;e++){const n=r[e];for(let r=0;r<7;r++){const e=n[r];2!==e&&(t+=e)}}return e?t:parseInt(t,2).toString(16).padStart(9,"0")}}}},e={};function t(n){var i=e[n];if(void 0!==i)return i.exports;var a=e[n]={exports:{}};return r[n](a,a.exports,t),a.exports}(()=>{const r=t(618),e={disappearingAct1:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],disappearingAct2:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([0,1,1,1,1,1,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],disappearingAct3:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,1,1,1,1,0]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],spaceInvader:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,0,1,0,1,0]),new Uint8Array([1,1,0,1,0,1,1]),new Uint8Array([2,2,1,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2])],puroMask:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,0,1,0,1,0]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([2,2,1,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2])],disappearingAct4:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,1,0,1,0,0]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2])],generated:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,0,0,0]),new Uint8Array([1,1,1,1,0,0,0]),new Uint8Array([1,1,0,0,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],baseGame:[new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([1,1,1,0,1,1,1]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2])]},n=t=>{const[n,i]=React.useState(),[a,o]=React.useState(),[s,y]=React.useState(!1),l=()=>{y(!1),i("Something went wrong...")};return React.createElement(React.Fragment,null,React.createElement("button",{id:"solveButton",type:"button",className:"btn btn-primary",disabled:s,onClick:()=>{(async r=>{if(s)return null;y(!0),i("Calculating solution...");const{solution:e}=await(await fetch(`/solve?code=${r}`).catch(l)).json().catch(l);y(!1),i("Solution found!"),o(e.map(((r,e)=>React.createElement("li",{key:e},"(",r.from.x,", ",r.from.y,")"," ",React.createElement("i",{className:"fa fa-solid fa-arrow-right"})," ","(",r.to.x,", ",r.to.y,")"))))})(new r(e[t.puzzleName]).code())}},"Solve!"),React.createElement("h3",null,n),React.createElement("ol",{id:"steps"},a))};window.onload=()=>{ReactDOM.createRoot(document.getElementById("solveUIContainer")).render(React.createElement(n,{puzzleName:"generated"}))}})()})();