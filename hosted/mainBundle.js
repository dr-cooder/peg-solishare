(()=>{var t={618:(t,e,r)=>{const{emptyBoard:n,width:i,height:o,validMoveDeltas:a,validMoveDeltaCount:s,symmetries:l,symmetryKVPs:y,isCode:c,isGrid:d,codeToGrid:u,gridToCode:f}=r(856);class m{constructor(t){t?d(t)?this.grid=t:c(t)?this.grid=u(t):this.grid=n():this.grid=n()}copyGrid(){const t=[];for(let e=0;e<o;e++)t[e]=new Uint8Array(this.grid[e]);return Object.seal(t),t}isValidMove(t,e){if(!t.from||"number"!=typeof t.from.x||"number"!=typeof t.from.y||!t.to||"number"!=typeof t.to.x||"number"!=typeof t.from.y)return null;const r=t.from.x,n=t.from.y,l=t.to.x,y=t.to.y,c=l-r,d=y-n;let u=null;for(let t=0;t<s;t++){const e=a[t];e.x===c&&e.y===d&&(u=e)}if(!u)return null;const f=u.middle,m=r+f.x,w=n+f.y;if(r<0||r>=i)return null;if(n<0||n>=o)return null;if(l<0||l>=i)return null;if(y<0||y>=o)return null;const A=e?0:1,U=e?0:1,p=e?1:0;return this.grid[n][r]!==A||this.grid[w][m]!==U||this.grid[y][l]!==p?null:{matchingDelta:u,moveMid:{x:m,y:w}}}allValidMoves(){const t=[];for(let e=0;e<o;e++)for(let r=0;r<i;r++)if(1===this.grid[e][r])for(let n=0;n<s;n++){const i=a[n],o={from:{x:r,y:e},to:{x:r+i.x,y:e+i.y}};this.isValidMove(o)&&t.push(o)}return t}makeMove(t,e){const r=this.isValidMove(t,e);if(!r)return;const{moveMid:n}=r,i=t.from,o=t.to,a=e?1:0,s=e?1:0,l=e?0:1;this.grid[i.y][i.x]=a,this.grid[n.y][n.x]=s,this.grid[o.y][o.x]=l}countBalls(){let t=0;for(let e=0;e<o;e++)for(let r=0;r<i;r++)1===this.grid[e][r]&&t++;return t}getSymmetries(){const t=[];for(let e=0;e<y.length;e++){const[r,n]=y[e];let a=!0;for(let t=0;t<o;t++){for(let e=0;e<i;e++){const{x:r,y:i}=n({x:e,y:t});if(this.grid[t][e]!==this.grid[i][r]){a=!1;break}}if(!a)break}a&&t.push(r)}return t}solve(){const t=new m(this.copyGrid());let e=t.countBalls();const r=[],n=[],i=()=>{if(4===e){const t=Array.from(r);n.push(t)}else{const n=t.allValidMoves();for(let o=0;o<n.length;o++){const a=n[o];t.makeMove(a),e--,r.push(a),i(),t.makeMove(a,!0),e++,r.pop()}}};return i(),n}solveOne(){const t=new m(this.copyGrid());let e=t.countBalls();const r=[],n=()=>{if(1===e)return r;const i=t.allValidMoves();for(let o=0;o<i.length;o++){const a=i[o];t.makeMove(a),e--,r.push(a);const s=n();if(s)return s;t.makeMove(a,!0),e++,r.pop()}return null};return n()}solveBetter(){const t=new m(this.copyGrid());let e=t.countBalls();const r=n=>{const i={moveFromParent:n,children:[]};n&&(t.makeMove(n),e--);const o=t.getSymmetries();i.symmetries=o;const a=t.allValidMoves(),s=a.length;for(let t=0;t<o.length;t++){const e=l[o[t]];for(let t=0;t<s;t++){const r=a[t];if(r){const n=e(r.from),i=e(r.to);for(let e=0;e<s;e++)if(t!==e){const t=a[e];if(t){const{from:r,to:o}=t;r.x===n.x&&r.y===n.y&&o.x===i.x&&o.y===i.y&&(a[e]=null)}}}}}for(let t=0;t<s;t++){const n=a[t];if(n){const t=r(n);0===t.children.length&&1!==e||i.children.push(t)}}return n&&(t.makeMove(n,!0),e++),i};return r()}gridToString(){return this.grid.map((t=>Array.from(t).map((t=>[".","O"," "][t])).join(" "))).join("\n")}code(){return f(this.grid)}}t.exports=m},856:t=>{const e=()=>{const t=[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])];return Object.seal(t),t},r={flipHoriz:t=>({x:6-t.x,y:t.y}),flipVert:t=>({x:t.x,y:6-t.y}),flipDiagPos:t=>({x:t.y,y:t.x}),flipDiagNeg:t=>({x:6-t.y,y:6-t.x}),rotate180:t=>({x:6-t.x,y:6-t.y}),rotate90counterClock:t=>({x:t.y,y:6-t.x}),rotate90clock:t=>({x:6-t.y,y:t.x})},n=Object.entries(r),i=new RegExp("^[0-9a-f]{9}$"),o=i.test.bind(i);t.exports={emptyBoard:e,width:7,height:7,spaces:33,validMoveDeltas:[{name:"right",x:2,y:0,middle:{x:1,y:0}},{name:"up",x:0,y:-2,middle:{x:0,y:-1}},{name:"left",x:-2,y:0,middle:{x:-1,y:0}},{name:"down",x:0,y:2,middle:{x:0,y:1}}],validMoveDeltaCount:4,symmetries:r,symmetryKVPs:n,isCode:o,isGrid:t=>{if(!t)return!1;const r=e();if(!Array.isArray(t))return!1;const n=t.length;if(7!==n)return!1;for(let e=0;e<n;e++){const n=t[e];if(!(n instanceof Uint8Array))return!1;const i=n.length;if(7!==i)return!1;for(let t=0;t<i;t++){const i=n[t];if(0!==i&&1!==i&&2!==i)return!1;if(2===r[e][t]!=(2===i))return!1}}return!0},codeToGrid:t=>{const r=parseInt(t,16).toString(2).padStart(33,"0"),n=e();let i=0;for(let t=0;t<7;t++){const e=n[t];for(let t=0;t<7;t++)2!==e[t]&&(e[t]=r[i],i++)}return n},gridToCode:t=>{let e="";for(let r=0;r<7;r++){const n=t[r];for(let t=0;t<7;t++){const r=n[t];2!==r&&(e+=r)}}return parseInt(e,2).toString(16).padStart(9,"0")}}}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n](o,o.exports,r),o.exports}(()=>{const t=r(618),e={disappearingAct1:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],disappearingAct2:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([0,1,1,1,1,1,0]),new Uint8Array([0,0,0,1,0,0,0]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],disappearingAct3:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,1,1,1,1,0]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2])],spaceInvader:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,0,1,0,1,0]),new Uint8Array([1,1,0,1,0,1,1]),new Uint8Array([2,2,1,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2])],puroMask:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,1,0,2,2]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([0,1,0,1,0,1,0]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([2,2,1,0,1,2,2]),new Uint8Array([2,2,0,0,0,2,2])],disappearingAct4:[new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([2,2,0,0,0,2,2]),new Uint8Array([0,0,0,0,0,0,0]),new Uint8Array([0,0,1,0,1,0,0]),new Uint8Array([0,0,1,1,1,0,0]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2])],baseGame:[new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([1,1,1,0,1,1,1]),new Uint8Array([1,1,1,1,1,1,1]),new Uint8Array([2,2,1,1,1,2,2]),new Uint8Array([2,2,1,1,1,2,2])]},n=r=>{const[n,i]=React.useState(),[o,a]=React.useState(),[s,l]=React.useState(!1),y=()=>{l(!1),i("Something went wrong...")};return React.createElement(React.Fragment,null,React.createElement("button",{id:"solveButton",type:"button",className:"btn btn-primary",disabled:s,onClick:()=>{(async t=>{if(s)return null;l(!0),i("Calculating solution...");const{solution:e}=await(await fetch(`/solve?code=${t}`).catch(y)).json().catch(y);l(!1),i("Solution found!"),a(e.map(((t,e)=>React.createElement("li",{key:e},"(",t.from.x,", ",t.from.y,")"," ",React.createElement("i",{className:"fa fa-solid fa-arrow-right"})," ","(",t.to.x,", ",t.to.y,")"))))})(new t(e[r.puzzleName]).code())}},"Solve!"),React.createElement("h3",null,n),React.createElement("ol",{id:"steps"},o))};window.onload=()=>{ReactDOM.createRoot(document.getElementById("solveUIContainer")).render(React.createElement(n,{puzzleName:"disappearingAct1"}))}})()})();